
plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'kotlin-parcelize'
    id 'dagger.hilt.android.plugin'
    id 'androidx.navigation.safeargs.kotlin'
    id 'com.google.gms.google-services'
}

// Create a variable called keystorePropertiesFile, and initialize it to your keystore.properties file, in the rootProject folder.
def keystorePropertiesFile = rootProject.file("keystore.properties")
// Initialize a new Properties() object called keystoreProperties.
def keystoreProperties = new Properties()
// Load your keystore.properties file into the keystoreProperties object.
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    signingConfigs {
        docCloud {
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
        }
    }

    defaultConfig {
        applicationId "com.demo.doccloud"
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.docCloud
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    buildFeatures {
        dataBinding true
    }
    sourceSets {
        main {
            res {
                srcDirs 'src\\main\\res', 'src\\main\\res\\layouts\\home', 'src\\main\\res\\layouts\\login', 'src\\main\\res\\layouts\\dialogs', 'src\\main\\res\\layouts\\camera', 'src\\main\\res\\drawables\\home', 'src\\main\\res\\drawables\\login', 'src\\main\\res\\drawables\\camera', 'src\\main\\res\\layouts\\crop', 'src\\main\\res\\drawables\\crop', 'src\\main\\res\\drawables\\common', 'src\\main\\res\\layouts\\edit', 'src\\main\\res\\drawables\\edit'
            }
        }
    }

    testOptions {
        unitTests {
            // Always show the result of every unit test when running via command line, even if it passes.
            includeAndroidResources = true
        }
    }
}

dependencies {

    // CameraX core library
    def camerax_version = '1.1.0-alpha07'
    implementation "androidx.camera:camera-core:$camerax_version"

    // CameraX Camera2 extensions
    implementation "androidx.camera:camera-camera2:$camerax_version"

    // CameraX Lifecycle library
    implementation "androidx.camera:camera-lifecycle:$camerax_version"

    // CameraX View class
    implementation 'androidx.camera:camera-view:1.0.0-alpha27'

    //WindowManager
    implementation 'androidx.window:window:1.0.0-alpha09'

    //Glide
    implementation 'com.github.bumptech.glide:glide:4.12.0'

    //Android-Image-Cropper
    implementation 'com.theartofdev.edmodo:android-image-cropper:2.8.0'

    // Room dependency
    def room_version = "2.3.0"
    implementation "androidx.room:room-runtime:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    implementation  "androidx.room:room-ktx:$room_version"


    // Hilt and WorkManager
    def hilt_work_manager_version = '1.0.0-alpha03'
    implementation "androidx.hilt:hilt-work:$hilt_work_manager_version"
    kapt "androidx.hilt:hilt-compiler:$hilt_work_manager_version"

    // WorkManager dependency
    def work_version = "2.5.0"
    implementation "android.arch.work:work-runtime-ktx:$work_version"

    // kotlin extensions for WorkManager
    implementation "androidx.work:work-runtime-ktx:$work_version"


    def dependencies = rootProject.ext.dependencies
    def testDependencies = rootProject.ext.testDependencies

    implementation dependencies.kotlin
    implementation dependencies.kotlinCore
    implementation dependencies.appCompat
    implementation dependencies.material
    implementation dependencies.constrainLayout
    implementation dependencies.navigationFragment
    implementation dependencies.navigationUi
    implementation dependencies.legacy
    implementation dependencies.livedata
    implementation dependencies.lifecycleViewmodel
    implementation dependencies.playServicesAuth
    //hilt
    implementation dependencies.hiltAndroid
    kapt dependencies.hiltAndroidCompiler
    //Hilt lifecycle Ext
    implementation dependencies.hiltViewmodel
    kapt dependencies.hiltCompiler
    // Import the Firebase BoM
    implementation platform(dependencies.firebaseBom)
    implementation dependencies.firebaseAnalytics
    implementation dependencies.fireBaseAuth
    implementation dependencies.fireBaseStorage
    implementation dependencies.fireBaseDatabase

    implementation dependencies.timber
    //to use await()
    implementation dependencies.coroutPlayServices

    implementation dependencies.gsonConverter

    // Tests
    testImplementation testDependencies.jUnit
    testImplementation testDependencies.hamcrest
    testImplementation testDependencies.mockito
    testImplementation testDependencies.robolectric
    testImplementation testDependencies.testCore
    testImplementation testDependencies.coroutinesLib
    testImplementation testDependencies.truthLib
    //Architecture Components core testing library (to use InstantTaskExecutorRule)
    testImplementation testDependencies.archCore

    androidTestImplementation testDependencies.espressoCore
    androidTestImplementation testDependencies.espressoContrib
    androidTestImplementation testDependencies.espressoIdling
    androidTestImplementation testDependencies.runner
}