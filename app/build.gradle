
plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'kotlin-parcelize'
    id 'dagger.hilt.android.plugin'
    id 'androidx.navigation.safeargs.kotlin'
    id 'com.google.gms.google-services'
}

// Create a variable called keystorePropertiesFile, and initialize it to your keystore.properties file, in the rootProject folder.
def keystorePropertiesFile = rootProject.file("keystore.properties")
// Initialize a new Properties() object called keystoreProperties.
def keystoreProperties = new Properties()
// Load your keystore.properties file into the keystoreProperties object.
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    signingConfigs {
        docCloud {
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
        }
    }

    defaultConfig {
        applicationId "com.demo.doccloud"
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "com.demo.doccloud.HiltTestRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.docCloud
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    buildFeatures {
        dataBinding true
    }
    sourceSets {
        test {
            java.srcDirs += "$projectDir/src/testShared"
        }

        androidTest {
            java.srcDirs += "$projectDir/src/testShared"
        }

        main {
            res {
                srcDirs 'src\\main\\res', 'src\\main\\res\\layouts\\home', 'src\\main\\res\\layouts\\login', 'src\\main\\res\\layouts\\dialogs', 'src\\main\\res\\layouts\\camera', 'src\\main\\res\\drawables\\home', 'src\\main\\res\\drawables\\login', 'src\\main\\res\\drawables\\camera', 'src\\main\\res\\layouts\\crop', 'src\\main\\res\\drawables\\crop', 'src\\main\\res\\drawables\\common', 'src\\main\\res\\layouts\\edit', 'src\\main\\res\\drawables\\edit'
            }
        }
    }

    testOptions {
        unitTests {
            // Always show the result of every unit test when running via command line, even if it passes.
            includeAndroidResources = true
            //is required to keep your unit tests running as you add idling resource code to your application code.
            returnDefaultValues = true
        }
    }
    kapt {
        correctErrorTypes true
    }

    packagingOptions {
        exclude "**/attach_hotspot_windows.dll"
        exclude "META-INF/licenses/**"
        exclude "META-INF/AL2.0"
        exclude "META-INF/LGPL2.1"
    }
    //https://stackoverflow.com/questions/67358179/android-espresso-test-error-no-static-method-loadsingleserviceornull
    configurations.all {
        resolutionStrategy {
            force 'androidx.test:monitor:1.4.0'
        }
    }
}

dependencies {
    def dependencies = rootProject.ext.dependencies
    def testDependencies = rootProject.ext.testDependencies

    implementation dependencies.kotlin
    implementation dependencies.kotlinCore
    implementation dependencies.appCompat
    implementation dependencies.material
    implementation dependencies.constrainLayout
    implementation dependencies.navigationFragment
    implementation dependencies.navigationUi
    implementation dependencies.legacy
    implementation dependencies.livedata
    implementation dependencies.lifecycleViewmodel
    implementation dependencies.playServicesAuth
    //hilt
    implementation dependencies.hiltAndroid
    kapt dependencies.hiltAndroidCompiler
    //Hilt lifecycle Ext
    implementation dependencies.hiltViewmodel
    kapt dependencies.hiltCompiler
    // Import the Firebase BoM
    implementation platform(dependencies.firebaseBom)
    implementation dependencies.firebaseAnalytics
    implementation dependencies.fireBaseAuth
    implementation dependencies.fireBaseStorage
    implementation dependencies.fireBaseDatabase
    implementation dependencies.timber
    //to use await()
    implementation dependencies.coroutPlayServices
    implementation dependencies.gsonConverter
    // CameraX core library
    implementation dependencies.cameraX
    implementation dependencies.camera2
    implementation dependencies.cameraLifeCycle
    implementation dependencies.cameraView
    implementation dependencies.windowManager
    //cropper
    implementation dependencies.cropper
    //glide
    implementation dependencies.glide
    //Room
    implementation dependencies.roomRuntime
    kapt dependencies.roomCompiler
    implementation dependencies.roomKtx
    implementation dependencies.hiltWork
    //work manager
    implementation dependencies.androidArchWork
    implementation dependencies.androidXWork
    implementation testDependencies.espressoIdling

//    // Tests
    testImplementation testDependencies.hamcrest
    testImplementation testDependencies.robolectric
    testImplementation testDependencies.testCore
    testImplementation testDependencies.truthLib
    testImplementation testDependencies.jUnitAndroidX
    testImplementation testDependencies.coroutinesLib

    androidTestImplementation testDependencies.jUnit
    androidTestImplementation testDependencies.navigationTest
    androidTestImplementation testDependencies.archCore
    //for test workManager
    androidTestImplementation dependencies.androidXWorkTest
    androidTestImplementation testDependencies.espressoCore
    androidTestImplementation testDependencies.espressoContrib
    androidTestImplementation testDependencies.runner
    androidTestImplementation testDependencies.coroutinesLib
    androidTestImplementation testDependencies.googleHiltAndroid
    kaptAndroidTest testDependencies.comGoogleHCompiler
    androidTestImplementation testDependencies.mockito
    //This library is required to use Mockito in an Android project. Mockito needs to generate classes at runtime. On Android, this is done using dex byte code, and so this library enables Mockito to generate objects during runtime on Android.
    androidTestImplementation testDependencies.dexmakerMockito
    androidTestImplementation testDependencies.espressoIntents
    androidTestImplementation testDependencies.espressoAccess
    androidTestImplementation testDependencies.espressoWeb
    androidTestImplementation testDependencies.espressoIdlingConcur
    debugImplementation testDependencies.fragmentTesting
}