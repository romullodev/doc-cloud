
plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'kotlin-parcelize'
    id 'dagger.hilt.android.plugin'
    id 'androidx.navigation.safeargs.kotlin'
    id 'com.google.gms.google-services'
}

// Create a variable called keystorePropertiesFile, and initialize it to your keystore.properties file, in the rootProject folder.
def keystorePropertiesFile = rootProject.file("keystore.properties")
// Initialize a new Properties() object called keystoreProperties.
def keystoreProperties = new Properties()
// Load your keystore.properties file into the keystoreProperties object.
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    signingConfigs {
        docCloud {
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
        }
    }

    defaultConfig {
        applicationId "com.demo.doccloud"
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "com.demo.doccloud.HiltTestRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.docCloud
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    buildFeatures {
        dataBinding true
    }
    sourceSets {
        test {
            java.srcDirs += "$projectDir/src/testShared"
        }

        androidTest {
            java.srcDirs += "$projectDir/src/testShared"
        }

        main {
            res {
                srcDirs 'src\\main\\res', 'src\\main\\res\\layouts\\home', 'src\\main\\res\\layouts\\login', 'src\\main\\res\\layouts\\dialogs', 'src\\main\\res\\layouts\\camera', 'src\\main\\res\\drawables\\home', 'src\\main\\res\\drawables\\login', 'src\\main\\res\\drawables\\camera', 'src\\main\\res\\layouts\\crop', 'src\\main\\res\\drawables\\crop', 'src\\main\\res\\drawables\\common', 'src\\main\\res\\layouts\\edit', 'src\\main\\res\\drawables\\edit', 'src\\main\\res\\layouts\\forgot', 'src\\main\\res\\layouts\\register'
            }
        }
    }

    testOptions {
        unitTests {
            // Always show the result of every unit test when running via command line, even if it passes.
            includeAndroidResources = true
            //is required to keep your unit tests running as you add idling resource code to your application code.
            returnDefaultValues = true
        }
    }
    kapt {
        correctErrorTypes true
    }

    packagingOptions {
        exclude "**/attach_hotspot_windows.dll"
        exclude "META-INF/licenses/**"
        exclude "META-INF/AL2.0"
        exclude "META-INF/LGPL2.1"
    }
    //https://stackoverflow.com/questions/67358179/android-espresso-test-error-no-static-method-loadsingleserviceornull
    configurations.all {
        resolutionStrategy {
            force 'androidx.test:monitor:1.4.0'
        }
    }
}

dependencies {

    def kotlin_core_version = '1.6.0'
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "androidx.core:core-ktx:$kotlin_core_version"

    def appcompat_version = '1.3.0'
    implementation "androidx.appcompat:appcompat:$appcompat_version"
    implementation "com.google.android.material:material:$appcompat_version"

    def constraint_layout_version = '2.0.4'
    implementation "androidx.constraintlayout:constraintlayout:$constraint_layout_version"

    def navigation_version = '2.3.5'
    implementation "androidx.navigation:navigation-fragment-ktx:$navigation_version"
    implementation "androidx.navigation:navigation-ui-ktx:$navigation_version"

    def legacy_version = '1.0.0'
    implementation "androidx.legacy:legacy-support-v4:$legacy_version"

    def livedata_version = '2.3.1'
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$livedata_version"

    def lifecycle_viewmodel_version = '2.3.1'
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_viewmodel_version"

    //Hilt
    implementation "com.google.dagger:hilt-android:$hilt_version" //this variable is on build.gradle (project)
    kapt "com.google.dagger:hilt-android-compiler:$hilt_version"

    //Hilt lifecycle Ext
    def hilt_lifecycle_version = '1.0.0-alpha03'
    implementation "androidx.hilt:hilt-lifecycle-viewmodel:$hilt_lifecycle_version"
    kapt "androidx.hilt:hilt-compiler:$hilt_lifecycle_version"

    def play_services_auth = '19.2.0'
    implementation "com.google.android.gms:play-services-auth:$play_services_auth"

    // Import the Firebase BoM
    def firebase_bom_version = '28.3.0'
    implementation platform("com.google.firebase:firebase-bom:$firebase_bom_version")
    // Add the dependency for the Firebase SDK for Google Analytics
    // When using the BoM, don't specify versions in Firebase dependencies
    implementation 'com.google.firebase:firebase-analytics-ktx'
    implementation 'com.google.firebase:firebase-auth-ktx'
    implementation 'com.google.firebase:firebase-storage-ktx'
    implementation 'com.google.firebase:firebase-database-ktx'

    def timber_version = '4.7.1'
    implementation "com.jakewharton.timber:timber:$timber_version"

    //to use await()
    def coroutines_play_service_version = '1.5.1'
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-play-services:$coroutines_play_service_version"

    def json_converter = '2.8.1'
    implementation "com.squareup.retrofit2:converter-gson:$json_converter"

    def camerax_version = '1.1.0-alpha07'
    // CameraX core library
    implementation "androidx.camera:camera-core:$camerax_version"
    implementation "androidx.camera:camera-camera2:$camerax_version"
    implementation "androidx.camera:camera-lifecycle:$camerax_version"

    def camera_view_version = '1.0.0-alpha27'
    implementation "androidx.camera:camera-view:$camera_view_version"

    def window_manager_version = '1.0.0-alpha09'
    implementation "androidx.window:window:$window_manager_version"

    def cropper_version = '2.8.0'
    //cropper
    implementation "com.theartofdev.edmodo:android-image-cropper:$cropper_version"

    //glide
    def glide_version = '4.12.0'
    implementation "com.github.bumptech.glide:glide:$glide_version"

    def room_version = '2.3.0'
    //Room
    implementation "androidx.room:room-runtime:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    implementation "androidx.room:room-ktx:$room_version"

    def hilt_work_manager_version = '1.0.0-alpha03'
    implementation "androidx.hilt:hilt-work:$hilt_work_manager_version"

    //work manager
    def work_version = "2.6.0"
    implementation "android.arch.work:work-runtime-ktx:$work_version"
    implementation "androidx.work:work-runtime-ktx:$work_version"

    //for test workManager
    androidTestImplementation "androidx.work:work-testing:$work_version"

    def espresso_version = '3.4.0'
    androidTestImplementation "androidx.test.espresso:espresso-core:$espresso_version"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:$espresso_version"
    implementation "androidx.test.espresso:espresso-idling-resource:$espresso_version"
    androidTestImplementation "androidx.test.espresso:espresso-intents:$espresso_version"
    androidTestImplementation "androidx.test.espresso:espresso-accessibility:$espresso_version"
    androidTestImplementation "androidx.test.espresso:espresso-web:$espresso_version"
    androidTestImplementation "androidx.test.espresso.idling:idling-concurrent:$espresso_version"

    def runner_version = '1.2.0'
    androidTestImplementation "androidx.test:runner:$runner_version"

    def coroutines_test_version = '1.5.0'
    androidTestImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines_test_version"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines_test_version"

    androidTestImplementation "com.google.dagger:hilt-android-testing:$hilt_version"
    kaptAndroidTest "com.google.dagger:hilt-compiler:$hilt_version"

    def mockito_version = '1.10.19'
    androidTestImplementation "org.mockito:mockito-core:$mockito_version"


    def hamcrest_version = '1.3'
    testImplementation "org.hamcrest:hamcrest-library:$hamcrest_version"

    def robolectric_version = '4.6.1'
    testImplementation "org.robolectric:robolectric:$robolectric_version"

    def test_core = '1.4.0'
    testImplementation  "androidx.test:core-ktx:$test_core"

    def truth_version = '1.1.3'
    testImplementation "com.google.truth:truth:$truth_version"

    def jUnit_androidx = '1.1.3'
    testImplementation "androidx.test.ext:junit-ktx:$jUnit_androidx"

    def jUnit_version = '4.12'
    androidTestImplementation "junit:junit:$jUnit_version"

    def navigation_test_version = '2.3.5'
    androidTestImplementation "androidx.navigation:navigation-testing:$navigation_test_version"

    def arch_testing_version = '2.1.0'
    androidTestImplementation "androidx.arch.core:core-testing:$arch_testing_version"

    //This library is required to use Mockito in an Android project. Mockito needs to generate classes at runtime. On Android, this is done using dex byte code, and so this library enables Mockito to generate objects during runtime on Android.
    def dexMaker_mockito_version = '2.28.1'
    androidTestImplementation "com.linkedin.dexmaker:dexmaker-mockito:$dexMaker_mockito_version"

    def fragment_testing_version = '1.3.5'
    debugImplementation "androidx.fragment:fragment-testing:$fragment_testing_version"

    def mockk_version = '1.12.0'
    testImplementation "io.mockk:mockk:$mockk_version"
    androidTestImplementation "io.mockk:mockk-android:$mockk_version"

}